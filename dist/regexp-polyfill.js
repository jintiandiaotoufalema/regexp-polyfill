!function(e,r){if("object"==typeof exports&&"object"==typeof module)module.exports=r();else if("function"==typeof define&&define.amd)define([],r);else{var t=r();for(var i in t)("object"==typeof exports?exports:e)[i]=t[i]}}(global,(()=>(()=>{"use strict";var e={17:e=>{e.exports=require("path")}},r={};function t(i){var o=r[i];if(void 0!==o)return o.exports;var n=r[i]={exports:{}};return e[i](n,n.exports,t),n.exports}t.d=(e,r)=>{for(var i in r)t.o(r,i)&&!t.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:r[i]})},t.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var i={};return(()=>{t.r(i),t.d(i,{default:()=>o});const e=t(17).resolve(__dirname,"ReRegExp.js");let r=!1;function o(t){const{types:i}=t;return{name:"regexp-polyfill",visitor:{RegExpLiteral(e){const{pattern:t,flags:o}=e.node;e.replaceWith(i.newExpression(i.identifier("ReRegExp"),[i.stringLiteral(t),i.stringLiteral(o)])),r=!0},CallExpression(e){i.isIdentifier(e.node.callee,{name:"RegExp"})&&(e.replaceWith(i.newExpression(i.identifier("ReRegExp"),e.node.arguments)),r=!0)},NewExpression(e){i.isIdentifier(e.node.callee,{name:"RegExp"})&&(e.replaceWith(i.newExpression(i.identifier("ReRegExp"),e.node.arguments)),r=!0)},Program:{enter(e){r=!1},exit(t,o){r&&t.node.body.unshift(i.variableDeclaration("const",[i.variableDeclarator(i.identifier("ReRegExp"),i.callExpression(i.identifier("require"),[i.stringLiteral(e)]))]))}}}}}})(),i})()));