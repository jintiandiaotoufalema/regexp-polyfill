!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var s=t();for(var r in s)("object"==typeof exports?exports:e)[r]=s[r]}}(global,(()=>(()=>{"use strict";var e={890:e=>{class t extends RegExp{constructor(e,t){let s=!1,r="";const o=e=>e.replace(/_sIgNaL_1/g,"\\(").replace(/_sIgNaL_2/g,"\\)");if("string"==typeof e&&e.match(/^\(\?\<=/)){s=!0,e=e.replace(/\\\(/g,"_sIgNaL_1").replace(/\\\)/g,"_sIgNaL_2");let t=0;const i=e.split("").findIndex((e=>{if("("===e)++t;else if(")"===e&&! --t)return!0;return!1}));r=o(e.slice(4,i)),e=o(e.slice(i+1))}super(e,t),this.__isAssert=!1,this.__assertPattern="",this.__isAssert=s,this.__assertPattern=r,this.__assertRegExp=new RegExp(`^${r}`)}[Symbol.match](e){const t=RegExp.prototype[Symbol.match].call(this,e);return t&&this.__isAssert&&t.forEach(((e,t,s)=>{!t&&Reflect.has(s,"index")&&(s.index+=(e.match(this.__assertRegExp)||[""])[0].length),s[t]=e.replace(this.__assertRegExp,"")})),t}}e.exports=t}},t={};return function s(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,s),i.exports}(890)})()));